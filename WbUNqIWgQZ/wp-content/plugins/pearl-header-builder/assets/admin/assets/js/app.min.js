(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var AppRootController = (function () {
    function AppRootController($http, $compile, $window, $mdToast, $httpParamSerializerJQLike, $scope, $timeout, $rootScope, wpMedia, History) {
        _classCallCheck(this, AppRootController);

        this.$compile = $compile;
        this.$http = $http;
        this.ajaxurl = $window.ajaxurl;
        this.$mdToast = $mdToast;
        this.jQlikeSerialize = $httpParamSerializerJQLike;
        this.$scope = $scope;
        this.$rootScope = $rootScope;
        this.$rootScope.theme_options = [];
        this.$timeout = $timeout;
        this.wpMedia = wpMedia;
        this.$history = History;

        // $rootScope.$watch('theme_options', function (newValue, oldValue) {
        //     $rootScope.$broadcast('theme_options_changed', newValue, oldValue)
        // }, true);
    }

    _createClass(AppRootController, [{
        key: '$onInit',
        value: function $onInit() {
            var $_this = this;
            this.undo = false;
            this.$rootScope.theme_options = ngDefaultOptions;
            this.$rootScope.theme_options_backups = [];
            this.activeTab = 0;
            this.activeSubTab = 0;
            if (typeof ngDeleteUrl !== 'undefined') {
                this.deleteUrl = ngDeleteUrl;
                this.deleteHb = ngCurrentHb;
            }

            this.$rootScope.$watch('theme_options.page.options.error_page.options.error_page_bg.data.value', function (val, oldVal) {
                $_this.errorBageBg = $_this.wpMedia.getImageById(val).then(function (data) {
                    $_this.errorBageBg = data.url;
                    $_this.$scope.$digest();
                });
            });

            this.$history.watch('theme_options');

            // this.activeSubTab = 0;
        }
    }, {
        key: 'watchForUndo',
        value: function watchForUndo() {
            this.$rootScope.$on('theme_options_changed', function (e, newValue, oldValue) {
                // let a = JSON.stringify(newValue).replace(/"/g, '');
                // let b = JSON.stringify(oldValue).replace(/"/g, '');

            });
        }
    }, {
        key: 'getOption',
        value: function getOption(option) {

            var res = '';

            angular.forEach(this.$rootScope.theme_options, function (h_tab, h_tab_key) {
                angular.forEach(h_tab.options, function (v_tab, v_tab_key) {
                    angular.forEach(v_tab.options, function (v, k) {
                        if (option === k) {
                            res = v.data.value;
                        }
                    });
                });
            });

            return res;
        }
    }, {
        key: 'getGoogleFontUrl',
        value: function getGoogleFontUrl(fontfamily) {

            if (angular.isUndefined(fontfamily)) {
                fontfamily = 'sans-serif';
            }
            var link = encodeURI('https://fonts.googleapis.com/css?family=' + fontfamily + ':300,400,500,700,900');
            return link;
        }
    }, {
        key: 'undoAction',
        value: function undoAction() {
            // let backups = this.$rootScope.theme_options_backups;
            //
            // if (backups.length) {
            //     let last_backup = backups.pop();
            //     this.undo = true;
            //     this.$rootScope.theme_options = last_backup;
            // }
            this.$history.undo();
        }
    }, {
        key: 'saveSettings',
        value: function saveSettings() {
            var _this = this;

            var theme_options_values = {};

            angular.forEach(this.$rootScope.theme_options, function (h_tab_options, h_tab) {

                if (angular.isUndefined(theme_options_values[h_tab])) {
                    theme_options_values[h_tab] = {};
                    theme_options_values[h_tab]['options'] = {};
                }

                angular.forEach(h_tab_options.options, function (v_tab_options, v_tab) {

                    if (angular.isUndefined(theme_options_values[h_tab]['options'][v_tab])) {
                        theme_options_values[h_tab]['options'][v_tab] = {};
                        theme_options_values[h_tab]['options'][v_tab]['options'] = {};
                    }

                    angular.forEach(v_tab_options.options, function (element, element_key) {
                        theme_options_values[h_tab]['options'][v_tab]['options'][element_key] = {};
                        theme_options_values[h_tab]['options'][v_tab]['options'][element_key]['data'] = {};
                        if (typeof element.data !== 'undefined') {
                            theme_options_values[h_tab]['options'][v_tab]['options'][element_key]['data']['value'] = element.data.value;
                        }
                    });
                });
            });

            theme_options_values['hb'] = ngCurrentHeader;
            var data = this.jQlikeSerialize(theme_options_values);

            this.$http({
                url: this.ajaxurl,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
                },
                params: {
                    action: 'stm_hb_save_settings'
                },
                data: data
            }).then(function (res) {
                _this.$mdToast.show(_this.$mdToast.simple().textContent(res.data['message']).position('bottom right').parent('.stm_to-actions').hideDelay(3000));

                _this.$http({
                    url: _this.ajaxurl,
                    method: 'POST',
                    params: {
                        action: 'stm_hb_update_custom_styles_admin'
                    }
                }).then(function (res) {
                    console.log('Styles Updated');
                });
            });
        }
    }, {
        key: 'hideControl',
        value: function hideControl(dependency_name, show_value, m_key, s_key, equality) {
            var r = false;
            var value = '';
            var equal = true;
            var sub = false;

            if (typeof equality !== 'undefined') {
                equal = false;
            }

            if (typeof dependency_name !== 'undefined' && angular.isDefined(this.$rootScope.theme_options[m_key]['options'][s_key]['options'][dependency_name])) {
                if (angular.isDefined(this.$rootScope.theme_options[m_key]['options'][s_key]['options'][dependency_name]['data']) && angular.isDefined(this.$rootScope.theme_options[m_key]['options'][s_key]['options'][dependency_name]['data']['value'])) {
                    value = this.$rootScope.theme_options[m_key]['options'][s_key]['options'][dependency_name]['data']['value'];
                }
            }

            /*Check for value*/
            if (typeof show_value !== 'undefined') {
                if (equal && value !== show_value || !equal && value === show_value) r = true;
            }
            /*Check for checkbox*/
            if (value !== '' && typeof show_value === 'undefined') r = !value;

            return r;
        }
    }, {
        key: 'activateSubTab',
        value: function activateSubTab(index, tab) {
            if (tab === 'parent') {
                this.$timeout(function () {
                    var tab = angular.element('.tab-content .tab-pane').eq(index).find('li').eq(0).find('a');
                    tab.trigger('click');
                }, 200);
            }
            this.activeSubTab = index;
        }
    }, {
        key: 'hexToRgb',
        value: function hexToRgb(hex) {
            var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex, function (m, r, g, b) {
                return r + r + g + g + b + b;
            });

            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

            result = result ? parseInt(result[1], 16) + ', ' + parseInt(result[2], 16) + ', ' + parseInt(result[3], 16) : null;

            return result;
        }
    }]);

    return AppRootController;
})();

var AppRootComponent = {
    templateUrl: ngAppPath + 'components/app-root/app-root.component.html',
    controller: AppRootController,
    controllerAs: 'vm',
    bindings: {}
};
exports.AppRootComponent = AppRootComponent;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ButtonElementController = (function () {
    function ButtonElementController($mdDialog) {
        _classCallCheck(this, ButtonElementController);

        this.$mdDialog = $mdDialog;

        this.icons = [];

        var $_this = this;
        angular.forEach(stm_icons, function (value, key) {
            angular.forEach(value, function (icon) {
                $_this.icons.push(icon);
            });
        });
    }

    _createClass(ButtonElementController, [{
        key: "saveElement",
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return ButtonElementController;
})();

exports.ButtonElementController = ButtonElementController;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ButtonextElementController = (function () {
    function ButtonextElementController($mdDialog) {
        _classCallCheck(this, ButtonextElementController);

        this.$mdDialog = $mdDialog;

        this.icons = [];

        var $_this = this;
        angular.forEach(stm_icons, function (value, key) {
            angular.forEach(value, function (icon) {
                $_this.icons.push(icon);
            });
        });
    }

    _createClass(ButtonextElementController, [{
        key: "saveElement",
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return ButtonextElementController;
})();

exports.ButtonextElementController = ButtonextElementController;

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var CartElementController = (function () {
    function CartElementController($mdDialog) {
        _classCallCheck(this, CartElementController);

        this.$mdDialog = $mdDialog;

        this.styles = {
            'style_1': 'Style 1', //hc
            'style_2': 'Style 2' };

        //rental
        if (angular.isUndefined(this.element.value)) {
            this.element.value = 'style_1';
        }
    }

    _createClass(CartElementController, [{
        key: 'saveElement',
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return CartElementController;
})();

exports.CartElementController = CartElementController;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Custom_htmlElementController = (function () {
    function Custom_htmlElementController($mdDialog) {
        _classCallCheck(this, Custom_htmlElementController);

        this.$mdDialog = $mdDialog;
    }

    _createClass(Custom_htmlElementController, [{
        key: "saveElement",
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return Custom_htmlElementController;
})();

exports.Custom_htmlElementController = Custom_htmlElementController;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var DropdownElementController = (function () {
    function DropdownElementController($mdDialog) {
        _classCallCheck(this, DropdownElementController);

        this.$mdDialog = $mdDialog;

        this.styles = {
            'style_1': 'Style 1', //hc
            'style_2': 'Style 2' //travel
        };

        if (angular.isUndefined(this.element.value)) {
            this.element.value = 'style_1';
        }
    }

    _createClass(DropdownElementController, [{
        key: 'saveElement',
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }, {
        key: 'addCustomDropdowns',
        value: function addCustomDropdowns() {
            if (angular.isUndefined(this.element.dropdown)) {
                this.element.dropdown = [];
            }

            var label = this.label;
            var url = this.url;

            if (label != '' && url != '') {
                this.element.dropdown.push({
                    label: label,
                    url: url
                });

                this.label = this.url = '';
            }
        }
    }, {
        key: 'removeCustomDropdown',
        value: function removeCustomDropdown(key) {
            this.element.dropdown.splice(key, 1);
        }
    }]);

    return DropdownElementController;
})();

exports.DropdownElementController = DropdownElementController;

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var FilterElementController = (function () {
    function FilterElementController($mdDialog) {
        _classCallCheck(this, FilterElementController);

        this.$mdDialog = $mdDialog;
    }

    _createClass(FilterElementController, [{
        key: 'saveElement',
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }, {
        key: 'addCustomFilters',
        value: function addCustomFilters() {
            if (angular.isUndefined(this.element.filter)) {
                this.element.filter = [];
            }

            var label = this.label;
            var url = this.url;
            var icon = this.icon;
            var color = this.color;

            if (label != '' && url != '') {
                this.element.filter.push({
                    label: label,
                    url: url,
                    icon: icon,
                    color: color
                });

                this.label = this.url = this.icon = this.color = '';
            }
        }
    }, {
        key: 'removeCustomFilter',
        value: function removeCustomFilter(key) {
            this.element.filter.splice(key, 1);
        }
    }]);

    return FilterElementController;
})();

exports.FilterElementController = FilterElementController;

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var IconboxElementController = (function () {
    function IconboxElementController($mdDialog, $filter, $scope, $window) {
        _classCallCheck(this, IconboxElementController);

        this.$mdDialog = $mdDialog;
        this.$filter = $filter;
        this.$scope = $scope;
        this.icons = [];
        this.pages = $window.stmPages;

        var $_this = this;

        angular.forEach(stm_icons, function (value, key) {
            angular.forEach(value, function (icon) {
                $_this.icons.push(icon);
            });
        });
        this.filteredIcons = this.icons;
        this.limit = 40;

        this.styles = {
            'style_1': 'Style 1',
            'style_2': 'Style 2'
        };
    }

    _createClass(IconboxElementController, [{
        key: 'getFilteredIcons',
        // 'style_3' : 'Style 3',
        // 'style_4' : 'Style 4'
        value: function getFilteredIcons(iconName) {
            if (iconName.length === 0) {
                this.limit = 40;
                this.filteredIcons = this.icons;
            }
            this.filteredIcons = this.$filter('filter')(this.icons, iconName);
        }
    }, {
        key: 'saveElement',
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }, {
        key: 'updateLimit',
        value: function updateLimit() {
            this.limit += 40;
        }
    }, {
        key: 'sayToInfinite',
        value: function sayToInfinite() {
            this.$scope.$emit('iconsList:opened');
        }
    }]);

    return IconboxElementController;
})();

exports.IconboxElementController = IconboxElementController;

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var IcontextElementController = (function () {
    function IcontextElementController($mdDialog) {
        _classCallCheck(this, IcontextElementController);

        this.$mdDialog = $mdDialog;

        this.icons = [];
        var $_this = this;
        angular.forEach(stm_icons, function (value, key) {
            angular.forEach(value, function (icon) {
                $_this.icons.push(icon);
            });
        });
    }

    _createClass(IcontextElementController, [{
        key: "saveElement",
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return IcontextElementController;
})();

exports.IcontextElementController = IcontextElementController;

},{}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var ImageElementController = (function () {
    function ImageElementController($mdDialog, wpMedia, $scope, $http, $window) {
        _classCallCheck(this, ImageElementController);

        this.$mdDialog = $mdDialog;
        this.wpMedia = wpMedia;
        this.$scope = $scope;
        this.$http = $http;
        this.ajaxurl = $window.ajaxurl;

        if (this.element.value) {
            this.getSelectedImage(this.element.value);
        }

        this.$scope.$watch('vm.data.value', function (newId, oldId) {
            if (newId != oldId) {
                $_this.getSelectedImage(newId);
            }
        });

        if (angular.isUndefined(this.element.data)) {
            this.element.data = {};
        }

        if (angular.isUndefined(this.element.data.uselogo)) {
            this.element.data.uselogo = false;
        }

        this.element.data.uselogo = this.element.data.uselogo === 'true';
    }

    _createClass(ImageElementController, [{
        key: 'saveElement',
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }, {
        key: 'selectImage',
        value: function selectImage() {
            var _this = this;

            this.wpMedia.openModal();
            this.wpMedia.getSelectedImageLink('thumbnail').then(function (res) {
                _this.image_url = res.url;
                _this.element.value = res.id;
            });
        }
    }, {
        key: 'removeImage',
        value: function removeImage() {
            this.image_url = this.element.value = '';
        }
    }, {
        key: 'getSelectedImage',
        value: function getSelectedImage(id) {
            var _this2 = this;

            this.$http({
                url: this.ajaxurl,
                method: 'GET',
                params: {
                    image_id: this.element.value,
                    action: 'stm_hb_get_thumbnail'
                }
            }).then(function (res) {
                _this2.image_url = res.data;
            });
        }
    }]);

    return ImageElementController;
})();

exports.ImageElementController = ImageElementController;

},{}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var MenuElementController = (function () {
    function MenuElementController($mdDialog) {
        _classCallCheck(this, MenuElementController);

        this.$mdDialog = $mdDialog;

        this.menus = stmMenus;
        if (angular.isUndefined(this.element.data)) {
            this.element.data = {};
        }

        if (angular.isUndefined(this.element.data.id)) {
            this.element.data.id = '';
        }

        if (angular.isUndefined(this.element.data.style)) {
            this.element.data.style = 'default';
        }

        this.icons = [];
        var $_this = this;
        angular.forEach(stm_icons, function (value, key) {
            angular.forEach(value, function (icon) {
                $_this.icons.push(icon);
            });
        });

        if (angular.isUndefined(this.element.data.font)) {
            this.element.data.font = 'hf';
        }

        if (angular.isDefined(this.element.data.lh)) {
            this.element.data.lh = parseInt(this.element.data.lh);
        }

        if (angular.isDefined(this.element.data.fsz)) {
            this.element.data.fsz = parseInt(this.element.data.fsz);
        }
    }

    _createClass(MenuElementController, [{
        key: 'saveElement',
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return MenuElementController;
})();

exports.MenuElementController = MenuElementController;

},{}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var OfficesElementController = (function () {
    function OfficesElementController($mdDialog) {
        _classCallCheck(this, OfficesElementController);

        this.$mdDialog = $mdDialog;
        this.icons = [];

        var $_this = this;
        angular.forEach(stm_icons, function (value, key) {
            angular.forEach(value, function (icon) {
                $_this.icons.push(icon);
            });
        });

        if (angular.isUndefined(this.element.margins)) {
            this.element.margins = {};
        }

        this.colors = [{
            name: 'Main color',
            value: 'mtc'
        }, {
            name: 'Secondary color',
            value: 'stc'
        }, {
            name: 'Third color',
            value: 'ttc'
        }, {
            name: 'Custom',
            value: ''
        }];
        this.sortableOptions = {
            items: '.stm_to-builder__office'
        };
    }

    _createClass(OfficesElementController, [{
        key: '$onInit',
        value: function $onInit() {
            if (angular.isUndefined(this.element.data)) {
                this.element.data = {};
                if (angular.isUndefined(this.element.data.offices)) {
                    this.element.data.offices = [];
                }
            }
        }
    }, {
        key: 'saveElement',
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this.$mdDialog.cancel();
        }

        /*New office*/
    }, {
        key: 'addNewOffice',
        value: function addNewOffice() {
            if (angular.isUndefined(this.element.data)) {
                this.element.data = {};
            }

            var offices = this.element.data.offices;
            var officeName = this.office;

            if (officeName != '' && !angular.isUndefined(officeName)) {
                offices.push({
                    name: officeName
                });
                this.office = '';
            }
        }

        /*Add office info*/
    }, {
        key: 'addOfficeItem',
        value: function addOfficeItem(key) {
            var itemLabel = this.officeLabel[key];
            var itemUrl = this.officeUrl[key];
            var itemIcon = this.officeIcon[key];

            if (itemLabel != '' && !angular.isUndefined(itemLabel)) {
                var info = {
                    label: itemLabel,
                    icon: itemIcon,
                    url: itemUrl
                };

                var currentOffice = this.element.data.offices[key];

                if (angular.isUndefined(currentOffice.info)) {
                    currentOffice.info = [];
                }

                currentOffice.info.push(info);

                this.officeLabel[key] = this.officeUrl[key] = this.officeIcon[key] = '';
            }
        }

        /*Delete Office item*/
    }, {
        key: 'deleteOfficeItem',
        value: function deleteOfficeItem(key, infokey) {
            this.element.data.offices[key].info.splice(infokey, 1);
        }
    }, {
        key: 'changeOfficeOrder',
        value: function changeOfficeOrder(index, array) {}
    }]);

    return OfficesElementController;
})();

exports.OfficesElementController = OfficesElementController;

},{}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PopupElementController = (function () {
    function PopupElementController($mdDialog, $window) {
        _classCallCheck(this, PopupElementController);

        this.$mdDialog = $mdDialog;

        this.pages = $window.stmPages;

        this.icons = [];

        var $_this = this;
        angular.forEach(stm_icons, function (value, key) {
            angular.forEach(value, function (icon) {
                $_this.icons.push(icon);
            });
        });
    }

    _createClass(PopupElementController, [{
        key: "saveElement",
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return PopupElementController;
})();

exports.PopupElementController = PopupElementController;

},{}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var SearchElementController = (function () {
    function SearchElementController($mdDialog) {
        _classCallCheck(this, SearchElementController);

        this.$mdDialog = $mdDialog;

        this.styles = {
            'style_1': 'Style 1', //hc
            'style_2': 'Style 2', //medic
            'style_3': 'Style 3', //beauty
            'style_4': 'Style 4', //travel
            'style_5': 'Style 5' //Magazine
        };

        if (angular.isUndefined(this.element.value)) {
            this.element.value = 'style_1';
        }
    }

    _createClass(SearchElementController, [{
        key: 'saveElement',
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return SearchElementController;
})();

exports.SearchElementController = SearchElementController;

},{}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShortcodeElementController = (function () {
    function ShortcodeElementController($mdDialog) {
        _classCallCheck(this, ShortcodeElementController);

        this.$mdDialog = $mdDialog;
    }

    _createClass(ShortcodeElementController, [{
        key: "saveElement",
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return ShortcodeElementController;
})();

exports.ShortcodeElementController = ShortcodeElementController;

},{}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SigninElementController = (function () {
    function SigninElementController($mdDialog) {
        _classCallCheck(this, SigninElementController);

        this.$mdDialog = $mdDialog;
    }

    _createClass(SigninElementController, [{
        key: "saveElement",
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return SigninElementController;
})();

exports.SigninElementController = SigninElementController;

},{}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SocialsElementController = (function () {
    function SocialsElementController($mdDialog) {
        _classCallCheck(this, SocialsElementController);

        this.$mdDialog = $mdDialog;

        if (angular.isUndefined(this.element.data)) {
            this.element.data = {};
        }
    }

    _createClass(SocialsElementController, [{
        key: "saveElement",
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return SocialsElementController;
})();

exports.SocialsElementController = SocialsElementController;

},{}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextElementController = (function () {
    function TextElementController($mdDialog) {
        _classCallCheck(this, TextElementController);

        this.$mdDialog = $mdDialog;
    }

    _createClass(TextElementController, [{
        key: "saveElement",
        value: function saveElement(element) {
            this.$mdDialog.hide(element);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return TextElementController;
})();

exports.TextElementController = TextElementController;

},{}],19:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var WeatherElementController = (function () {
    function WeatherElementController($http, $mdDialog) {
        _classCallCheck(this, WeatherElementController);

        this.$http = $http;
        this.appId = '726d77feab5c453c37f3f57a7ef10177';
        this.apiUrl = 'http://api.openweathermap.org/data/2.5/weather?q=';
        this.units = [{
            name: 'imperial',
            symbol: '°F'
        }, {
            name: 'metric',
            symbol: '°C'
        }];
        this.unit = 'metric';
        this.weather = 'N/A';
        this.city = 'New York';
        this.$mdDialog = $mdDialog;
    }

    _createClass(WeatherElementController, [{
        key: 'getWeather',
        value: function getWeather() {
            var _this = this;

            var city = encodeURI(this.city);
            var req = '' + this.apiUrl + city + '&APPID=' + this.appId + '&units=' + this.unit;
            this.$http({
                method: 'get',
                url: req
            }).then(function (res) {
                console.log(res);
                if (res.status === 200) {
                    _this.weather = '°' + res.data.main.temp;
                }
            }, function (error) {
                _this.weather = 'Error';
            });
        }
    }, {
        key: 'saveElement',
        value: function saveElement(element) {
            this.element.value = {
                city: this.city,
                units: this.unit
            };
            this.$mdDialog.hide(element);
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this.$mdDialog.cancel();
        }
    }]);

    return WeatherElementController;
})();

exports.WeatherElementController = WeatherElementController;

},{}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _modalsBuilderBuilderModal = require('./../../../modals/builder/builder.modal');

var _builderElementsDropdownDropdownElement = require('./../../builder-elements/dropdown/dropdown.element');

var _builderElementsTextTextElement = require('./../../builder-elements/text/text.element');

var _builderElementsOfficesOfficesElement = require('./../../builder-elements/offices/offices.element');

var _builderElementsImageImageElement = require('./../../builder-elements/image/image.element');

var _builderElementsIconboxIconboxElement = require('./../../builder-elements/iconbox/iconbox.element');

var _builderElementsIcontextIcontextElement = require('./../../builder-elements/icontext/icontext.element');

var _builderElementsSocialsSocialsElement = require('./../../builder-elements/socials/socials.element');

var _builderElementsMenuMenuElement = require('./../../builder-elements/menu/menu.element');

var _builderElementsButtonButtonElement = require('./../../builder-elements/button/button.element');

var _builderElementsButtonextButtonextElement = require('./../../builder-elements/buttonext/buttonext.element');

var _builderElementsCartCartElement = require('./../../builder-elements/cart/cart.element');

var _builderElementsSigninSigninElement = require('./../../builder-elements/signin/signin.element');

var _builderElementsSearchSearchElement = require('./../../builder-elements/search/search.element');

var _builderElementsPopupPopupElement = require('./../../builder-elements/popup/popup.element');

var _builderElementsFilterFilterElement = require('./../../builder-elements/filter/filter.element');

var _builderElementsWeatherWeatherElement = require('./../../builder-elements/weather/weather.element');

var _builderElementsCustom_htmlCustom_htmlElement = require('./../../builder-elements/custom_html/custom_html.element');

var _builderElementsShortcodeShortcode = require('./../../builder-elements/shortcode/shortcode');

var BuilderElements = {
    'dropdown': _builderElementsDropdownDropdownElement.DropdownElementController,
    'text': _builderElementsTextTextElement.TextElementController,
    'offices': _builderElementsOfficesOfficesElement.OfficesElementController,
    'image': _builderElementsImageImageElement.ImageElementController,
    'iconbox': _builderElementsIconboxIconboxElement.IconboxElementController,
    'icontext': _builderElementsIcontextIcontextElement.IcontextElementController,
    'socials': _builderElementsSocialsSocialsElement.SocialsElementController,
    'menu': _builderElementsMenuMenuElement.MenuElementController,
    'button': _builderElementsButtonButtonElement.ButtonElementController,
    'buttonext': _builderElementsButtonextButtonextElement.ButtonextElementController,
    'cart': _builderElementsCartCartElement.CartElementController,
    'signin': _builderElementsSigninSigninElement.SigninElementController,
    'search': _builderElementsSearchSearchElement.SearchElementController,
    'popup': _builderElementsPopupPopupElement.PopupElementController,
    'filter': _builderElementsFilterFilterElement.FilterElementController,
    'weather': _builderElementsWeatherWeatherElement.WeatherElementController,
    'custom_html': _builderElementsCustom_htmlCustom_htmlElement.Custom_htmlElementController,
    'shortcode': _builderElementsShortcodeShortcode.ShortcodeElementController
};

var BuilderControlController = (function () {
    function BuilderControlController($mdDialog, $window) {
        _classCallCheck(this, BuilderControlController);

        this.$mdDialog = $mdDialog;
        this.$window = $window;
    }

    _createClass(BuilderControlController, [{
        key: '$onInit',
        value: function $onInit() {
            var $this = this;

            this.elementsList = {};
            this.elementsBuilder = {};
            angular.forEach(builderElements, function (value, key) {
                $this.elementsBuilder[value.type] = value;
            });

            var rowsSort = this.rowsSort = {
                'top': 1,
                'center': 2,
                'bottom': 3
            };
            var columnsSort = this.columnsSort = {
                'left': 1,
                'center': 2,
                'right': 3
            };

            var builder_skeleton = this.data.value;
            if (builder_skeleton == '' || builder_skeleton == ' ') {
                builder_skeleton = {};
            }

            angular.forEach(rowsSort, function (name, row) {
                if (angular.isUndefined(builder_skeleton[row])) {
                    builder_skeleton[row] = {};
                }

                angular.forEach(columnsSort, function (name, column) {
                    if (angular.isUndefined(builder_skeleton[row][column])) {
                        builder_skeleton[row][column] = [];
                    }
                });
            });

            this.data.value = builder_skeleton;
        }
    }, {
        key: 'openBuilderElements',
        value: function openBuilderElements($h, $v) {
            var $_this = this;

            var options = {
                templateUrl: ngAppPath + 'modals/builder/builder.modal.html',
                parent: angular.element(document.body),
                controller: _modalsBuilderBuilderModal.BuilderElementsController,
                controllerAs: 'vm',
                clickOutsideToClose: true
            };
            this.$mdDialog.show(options).then(function (element) {
                /*Save element in model*/
                var $value = $_this.data.value;

                /*if value empty, create Obj*/
                if ($value == '') {
                    $value = {};
                }

                /*If horizontal line is not created yet, create object (Top, Center, Bottom)*/
                if (angular.isUndefined($value[$h])) {
                    $value[$h] = {};
                }

                /*If vertical line is not created yet, create object (Left, Center, Right)*/
                if (angular.isUndefined($value[$h][$v])) {
                    $value[$h][$v] = [];
                }

                /*Add order and disabled meta in element*/
                element.order = {};
                var k = $value[$h][$v].length;
                var order = parseInt('' + $_this.rowsSort[$h] + $_this.columnsSort[$v] + k) * 10;
                element.order.tablet = element.order.mobile = order;

                var states = {
                    'default': '',
                    'tablet': '',
                    'mobile': ''
                };
                element.disabled = states;

                /*Push element in Value (ex: Top Left Element or Bottom Center Element)*/
                $value[$h][$v].push(element);

                $_this.data.value = $value;

                $_this.openElement($h, $v, $value[$h][$v].length - 1, angular.copy(element));
                $_this.getElementsList();
            }, function () {});
        }

        /**
         *
         * @param $h Top Center Bottom
         * @param $v Left Center Right
         * @param k Key of element
         * @param element
         */
    }, {
        key: 'openElement',
        value: function openElement($h, $v, k, element) {
            var $_this = this;
            if (element) {
                var type = element.type;

                var templateUrl = ngAppPath + ('components/builder-elements/' + type + '/' + type + '.element.html');
                if (typeof element.settings_template !== 'undefined') {
                    templateUrl = ngThemePath + element.settings_template + '.html';
                }

                var options = {
                    templateUrl: templateUrl,
                    parent: angular.element('body'),
                    controller: BuilderElements[type],
                    controllerAs: 'vm',
                    locals: {
                        element: angular.copy(element)
                    },
                    fullscreen: true,
                    bindToController: true,
                    clickOutsideToClose: true,
                    multiply: true
                };

                $_this.$mdDialog.show(options).then(function (element_data) {
                    /*Save element data*/
                    $_this.data.value[$h][$v][k] = element_data;
                    $_this.getElementsList('tablet');
                    $_this.getElementsList('mobile');
                }, function () {});
            }
        }
    }, {
        key: 'deleteElement',
        value: function deleteElement($h, $v, $k) {
            var deleteEl = this.$window.confirm('Are you sure want to delete the element?');
            if (deleteEl) {
                this.data.value[$h][$v].splice($k, 1);
            }
        }
    }, {
        key: 'duplicateElement',
        value: function duplicateElement($h, $v, k) {
            this.data.value[$h][$v].splice(k, 0, angular.copy(this.data.value[$h][$v][k]));
        }
    }, {
        key: 'toggleElementState',
        value: function toggleElementState($h, $v, k, type, disabled) {
            disabled = disabled == '' ? 'disabled' : '';
            this.data.value[$h][$v][k].disabled[type] = disabled;
        }
    }, {
        key: 'getElementsList',
        value: function getElementsList(type) {
            var _this = this;

            var elementsObj = this.data.value;
            var elementsList = [];

            angular.forEach(elementsObj, function (columns, $h) {
                angular.forEach(columns, function (elements, $v) {
                    angular.forEach(elements, function (element, k) {
                        element.position = [$h, $v, k];
                        elementsList.push(element);
                    });
                });
            });

            elementsList.sort(function (a, b) {
                return a.order[type] - b.order[type];
            });

            if (angular.isDefined(this.elementsList[type]) && this.elementsList[type] === elementsList) {
                return;
            } else {
                this.elementsList[type] = [];
            }

            angular.forEach(elementsList, function (v, k) {
                _this.elementsList[type].push(v);
            });
        }
    }, {
        key: 'elementMoved',
        value: function elementMoved($i, array) {
            array.splice($i, 1);
        }
    }, {
        key: 'rowClass',
        value: function rowClass(row) {

            var classes = 'stm_to-builder__' + row;
            var elements = this.data.value[row];
            var length = 0;

            angular.forEach(elements, function (v, k) {
                length += v.length;
            });

            if (length > 4) {
                classes += ' rowBig';
            }

            return classes;
        }
    }, {
        key: 'setCurrentBreakpoint',
        value: function setCurrentBreakpoint(name) {
            this.currentBreakpoint = name;
            this.getElementsList(name);
        }
    }, {
        key: 'elementInserted',
        value: function elementInserted(i) {

            var type = this.currentBreakpoint;
            var array = this.elementsList[type];

            // console.log(type, this.draggingItem);
            var currentItem = array[this.draggingItem];
            var lastIndex = array.length - 1;
            var order = parseInt(array[lastIndex].order.tablet) + 1;
            if (!angular.isUndefined(array[i])) {
                order = parseInt(array[i].order.tablet) - 1;
            }

            var $h = currentItem.position[0];
            var $v = currentItem.position[1];
            var k = currentItem.position[2];

            currentItem.order[type] = this.data.value[$h][$v][k].order[type] = order;

            this.getElementsList(type);
        }
    }]);

    return BuilderControlController;
})();

var BuilderControlComponent = {
    templateUrl: ngAppPath + 'components/controls/builder/builder.control.html',
    controller: BuilderControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.BuilderControlComponent = BuilderControlComponent;

},{"./../../../modals/builder/builder.modal":49,"./../../builder-elements/button/button.element":2,"./../../builder-elements/buttonext/buttonext.element":3,"./../../builder-elements/cart/cart.element":4,"./../../builder-elements/custom_html/custom_html.element":5,"./../../builder-elements/dropdown/dropdown.element":6,"./../../builder-elements/filter/filter.element":7,"./../../builder-elements/iconbox/iconbox.element":8,"./../../builder-elements/icontext/icontext.element":9,"./../../builder-elements/image/image.element":10,"./../../builder-elements/menu/menu.element":11,"./../../builder-elements/offices/offices.element":12,"./../../builder-elements/popup/popup.element":13,"./../../builder-elements/search/search.element":14,"./../../builder-elements/shortcode/shortcode":15,"./../../builder-elements/signin/signin.element":16,"./../../builder-elements/socials/socials.element":17,"./../../builder-elements/text/text.element":18,"./../../builder-elements/weather/weather.element":19}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var CheckboxControlController = (function () {
    function CheckboxControlController() {
        _classCallCheck(this, CheckboxControlController);
    }

    _createClass(CheckboxControlController, [{
        key: '$onInit',
        value: function $onInit() {
            this.data.value = this.data.value === 'true';
        }
    }]);

    return CheckboxControlController;
})();

var CheckboxControlComponent = {
    templateUrl: ngAppPath + 'components/controls/checkbox/checkbox.control.html',
    controller: CheckboxControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.CheckboxControlComponent = CheckboxControlComponent;

},{}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var ColorpickerControlController = (function () {
    function ColorpickerControlController($scope) {
        _classCallCheck(this, ColorpickerControlController);

        this.$scope = $scope;
    }

    _createClass(ColorpickerControlController, [{
        key: '$onInit',
        value: function $onInit() {
            this.options = {
                label: '',
                'default': this.data.value,
                genericPalette: false,
                history: true,
                openOnInput: true,
                clearButton: false
            };
        }
    }]);

    return ColorpickerControlController;
})();

var ColorpickerControlComponent = {
    templateUrl: ngAppPath + 'components/controls/colorpicker/colorpicker.control.html',
    controller: ColorpickerControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.ColorpickerControlComponent = ColorpickerControlComponent;

},{}],23:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var TextControlController = (function () {
    function TextControlController() {
        _classCallCheck(this, TextControlController);
    }

    _createClass(TextControlController, [{
        key: '$onInit',
        value: function $onInit() {}
    }]);

    return TextControlController;
})();

var TextControlComponent = {
    templateUrl: ngAppPath + 'components/controls/default/text.control.html',
    controller: TextControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.TextControlComponent = TextControlComponent;

},{}],24:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var DividerControlController = (function () {
    function DividerControlController() {
        _classCallCheck(this, DividerControlController);
    }

    _createClass(DividerControlController, [{
        key: '$onInit',
        value: function $onInit() {}
    }]);

    return DividerControlController;
})();

var DividerControlComponent = {
    templateUrl: ngAppPath + 'components/controls/divider/divider.control.html',
    controller: DividerControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.DividerControlComponent = DividerControlComponent;

},{}],25:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var FontControlController = (function () {
    function FontControlController() {
        _classCallCheck(this, FontControlController);
    }

    _createClass(FontControlController, [{
        key: '$onInit',
        value: function $onInit() {
            var _this = this;

            this.options = {
                label: '',
                'default': this.data.value,
                genericPalette: false,
                history: true,
                openOnInput: true
            };

            this.fonts = ngGoogleFonts;
            this.choices = [];

            angular.forEach(this.fonts, function (v, k) {
                _this.choices.push({
                    'label': v.label,
                    'value': k
                });
            });

            if (this.data.value == '') {
                this.data.value = {};
            }

            // if(angular.isDefined(this.data.value.name)) {
            //     this.data.value.name = {
            //         label: this.data.value.name,
            //         value: this.data.value.name,
            //     };
            // } else {
            //     this.data.value.name = {
            //         label: this.fonts[''].label,
            //         value: '',
            //     };
            // }

            this.fontStyles = ['name', 'size', 'ln', 'ls', 'mgb', 'color', 'fw'];

            /*Font family set empty strings if empty*/
            var $_this = this;
            angular.forEach($_this.fontStyles, function (name, key) {
                if (angular.isUndefined($_this.data.value[name])) {
                    $_this.data.value[name] = '';
                }
            });
        }
    }, {
        key: 'loadGfonts',
        value: function loadGfonts(name) {
            if (name) {
                var $ = jQuery;
                var name = name.replace(" ", "+");
                var link = '<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=' + name + ':300,300i,400,400i,600,600i,700,700i,800,800i" />';
                $('head').append(link);
            }
        }
    }, {
        key: 'preventLineHeight',
        value: function preventLineHeight(fs, ln) {
            if (fs > ln) this.data.value.ln = parseFloat(fs);
        }
    }]);

    return FontControlController;
})();

var FontControlComponent = {
    templateUrl: ngAppPath + 'components/controls/font/font.control.html',
    controller: FontControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.FontControlComponent = FontControlComponent;

},{}],26:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var FontcommonControlController = (function () {
    function FontcommonControlController() {
        _classCallCheck(this, FontcommonControlController);
    }

    _createClass(FontcommonControlController, [{
        key: '$onInit',
        value: function $onInit() {
            var _this = this;

            this.options = {
                label: '',
                'default': this.data.value,
                genericPalette: false,
                history: true,
                openOnInput: true
            };

            this.fonts = ngGoogleFonts;
            this.choices = [];

            angular.forEach(this.fonts, function (v, k) {
                _this.choices.push(k);
            });

            if (this.data.value == '') {
                this.data.value = {};
            }

            this.fontStyles = ['name', 'color', 'subset'];

            /*Font family set empty strings if empty*/
            var $_this = this;
            angular.forEach($_this.fontStyles, function (name, key) {
                if (angular.isUndefined($_this.data.value[name])) {
                    $_this.data.value[name] = '';
                }
            });
        }
    }, {
        key: 'colorChange',
        value: function colorChange(color) {
            var $ = jQuery;
            $('.stm_to-single_control-fontcommon').closest('.stm_to-controls-wrapper').find('.stm-font-preview.no-color').each(function () {
                $(this).css('color', color);
            });
        }
    }, {
        key: 'fontChanged',
        value: function fontChanged(font) {
            var $ = jQuery;
            $('.stm_to-single_control-fontcommon').closest('.stm_to-controls-wrapper').find('.stm-font-preview.no-font').each(function () {
                $(this).css('font-family', font);
            });
            var name = font.replace(" ", "+");
            var link = '<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=' + name + ':300,300i,400,400i,600,600i,700,700i,800,800i" />';
            $('head').append(link);
        }
    }]);

    return FontcommonControlController;
})();

var FontCommonControlComponent = {
    templateUrl: ngAppPath + 'components/controls/fontcommon/fontcommon.control.html',
    controller: FontcommonControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.FontCommonControlComponent = FontCommonControlComponent;

},{}],27:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var IconpickerControlController = (function () {
    function IconpickerControlController() {
        _classCallCheck(this, IconpickerControlController);
    }

    _createClass(IconpickerControlController, [{
        key: '$onInit',
        value: function $onInit() {}
    }]);

    return IconpickerControlController;
})();

var IconpickerControlComponent = {
    templateUrl: ngAppPath + 'components/controls/iconpicker/iconpicker.control.html',
    controller: IconpickerControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.IconpickerControlComponent = IconpickerControlComponent;

},{}],28:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var ImageControlController = (function () {
    function ImageControlController($http, $window, wpMedia, $scope) {
        _classCallCheck(this, ImageControlController);

        this.$http = $http;
        this.$window = $window;
        this.wpMedia = wpMedia;
        this.ajaxurl = $window.ajaxurl;
        this.$scope = $scope;
    }

    _createClass(ImageControlController, [{
        key: '$onInit',
        value: function $onInit() {
            this.image = '';
            if (this.data.value) {
                this.getSelectedImage(this.data.value);
            }

            var $_this = this;
            this.$scope.$watch('vm.data.value', function (newId, oldId) {
                if (newId != oldId) {
                    $_this.getSelectedImage(newId);
                }
            });
        }
    }, {
        key: 'getSelectedImage',
        value: function getSelectedImage(id) {
            var _this = this;

            this.$http({
                url: this.ajaxurl,
                method: 'GET',
                params: {
                    image_id: this.data.value,
                    action: 'stm_hb_get_thumbnail'
                }
            }).then(function (res) {
                _this.image = res.data;
            });
        }
    }, {
        key: 'selectImage',
        value: function selectImage() {
            var _this2 = this;

            this.wpMedia.openModal();
            this.wpMedia.getSelectedImageLink('thumbnail').then(function (res) {
                _this2.image = res.url;
                _this2.data.value = res.id;
            });
        }
    }, {
        key: 'removeImage',
        value: function removeImage() {
            this.image = '';
            this.data.value = '';
        }
    }]);

    return ImageControlController;
})();

var ImageControlComponent = {
    templateUrl: ngAppPath + 'components/controls/image/image.control.html',
    controller: ImageControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.ImageControlComponent = ImageControlComponent;

},{}],29:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var ImportControlController = (function () {
    function ImportControlController($http, $window) {
        _classCallCheck(this, ImportControlController);

        this.$http = $http;
        this.ajaxurl = $window.ajaxurl;

        this.layout = ngCurrentHeader;
        this.layout_name = ngCurrentHbName;
    }

    _createClass(ImportControlController, [{
        key: '$onInit',
        value: function $onInit() {
            this.ngUrl = ngAssets + '/headers/';
            this.nghbs = ngImportHBs;
            this.currentSrc = this.ngUrl + 'construction.jpg';
            this.adminUrl = this.ajaxurl + '?action=stm_hb_export_header&layout=' + this.layout + '&layout_name=' + this.layout_name;

            this.message = '';
            this.status = 'error';
        }
    }, {
        key: 'imageUrl',
        value: function imageUrl(url) {
            return this.ngUrl + url + '.jpg';
        }
    }, {
        key: 'export_hb',
        value: function export_hb() {
            var layout = this.layout;
            var layout_name = this.layout_name;
            this.$http({
                url: this.ajaxurl,
                method: 'POST',
                params: {
                    layout: layout,
                    layout_name: layout_name,
                    action: 'stm_hb_export_header'
                }
            }).then(function (res) {
                console.log('Styles Updated');
            });
        }
    }, {
        key: 'importHeader',
        value: function importHeader(layout) {
            var $this = this;
            $this.error = '';

            this.$http({
                url: this.ajaxurl,
                method: 'POST',
                params: {
                    layout: layout,
                    action: 'stm_hb_import_header'
                }
            }).then(function (res) {
                var data = res.data;
                $this.message = data.message;
                $this.status = data.status;

                if (typeof data.url !== 'undefined') {
                    window.location.href = data.url;
                }
            });
        }
    }]);

    return ImportControlController;
})();

var ImportControlComponent = {
    templateUrl: ngAppPath + 'components/controls/import/import.control.html',
    controller: ImportControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.ImportControlComponent = ImportControlComponent;

},{}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var PosttypeControlController = (function () {
    function PosttypeControlController() {
        _classCallCheck(this, PosttypeControlController);
    }

    _createClass(PosttypeControlController, [{
        key: '$onInit',
        value: function $onInit() {
            console.log(this.data);
            if (angular.isUndefined(this.data.value) || this.data.value === '') {
                this.data.value = {};
            }

            this.data.value.enabled = this.stringToBool(this.data.value.enabled);
            this.data.value.has_archive = this.stringToBool(this.data.value.has_archive);
            this.data.value['public'] = this.stringToBool(this.data.value['public']);
        }
    }, {
        key: 'stringToBool',
        value: function stringToBool(val) {
            if (angular.isString(val)) {
                return val === 'true';
            }
            return val;
        }
    }]);

    return PosttypeControlController;
})();

var PosttypeControlComponent = {
    templateUrl: ngAppPath + 'components/controls/posttype/posttype.control.html',
    controller: PosttypeControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.PosttypeControlComponent = PosttypeControlComponent;

},{}],31:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var RadioControlController = (function () {
    function RadioControlController() {
        _classCallCheck(this, RadioControlController);
    }

    _createClass(RadioControlController, [{
        key: '$onInit',
        value: function $onInit() {}
    }]);

    return RadioControlController;
})();

var RadioControlComponent = {
    templateUrl: ngAppPath + 'components/controls/radio/radio.control.html',
    controller: RadioControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.RadioControlComponent = RadioControlComponent;

},{}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var SelectControlController = (function () {
    function SelectControlController() {
        _classCallCheck(this, SelectControlController);
    }

    _createClass(SelectControlController, [{
        key: '$onInit',
        value: function $onInit() {}
    }, {
        key: 'checkValue',
        value: function checkValue() {
            this.data.value = this.data.value === '' ? false : this.data.value;
        }
    }, {
        key: 'getValue',
        value: function getValue(k, v) {
            if (typeof k === 'number') {
                return v;
            }
            return k;
        }
    }]);

    return SelectControlController;
})();

var SelectControlComponent = {
    templateUrl: ngAppPath + 'components/controls/select/select.control.html',
    controller: SelectControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.SelectControlComponent = SelectControlComponent;

},{}],33:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var SliderControlController = (function () {
    function SliderControlController() {
        _classCallCheck(this, SliderControlController);
    }

    _createClass(SliderControlController, [{
        key: '$onInit',
        value: function $onInit() {
            this.data.value = parseFloat(this.data.value);
        }
    }]);

    return SliderControlController;
})();

var SliderControlComponent = {
    templateUrl: ngAppPath + 'components/controls/slider/slider.control.html',
    controller: SliderControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.SliderControlComponent = SliderControlComponent;

},{}],34:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var SocialsControlController = (function () {
    function SocialsControlController() {
        _classCallCheck(this, SocialsControlController);
    }

    _createClass(SocialsControlController, [{
        key: '$onInit',
        value: function $onInit() {
            if (this.data.value === '') {
                this.data.value = [];
            }
            this.social = '';
            this.url = '';
        }
    }, {
        key: 'addSocial',
        value: function addSocial() {
            if (this.data.value === '') {
                this.data.value = [];
            }
            if (this.url !== '' && this.social !== '') {
                this.data.value.push({
                    'social': 'fa fa-' + this.social,
                    'url': this.url
                });
                this.social = '';
                this.url = '';
            }
        }
    }, {
        key: 'removeSocial',
        value: function removeSocial(key) {
            this.data.value.splice(key, 1);
        }
    }]);

    return SocialsControlController;
})();

var SocialsControlComponent = {
    templateUrl: ngAppPath + 'components/controls/socials/socials.control.html',
    controller: SocialsControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.SocialsControlComponent = SocialsControlComponent;

},{}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var SwitchControlController = (function () {
    function SwitchControlController() {
        _classCallCheck(this, SwitchControlController);
    }

    _createClass(SwitchControlController, [{
        key: '$onInit',
        value: function $onInit() {
            this.data.value = this.data.value === 'true' || this.data.value === true;
        }
    }]);

    return SwitchControlController;
})();

var SwitchControlComponent = {
    templateUrl: ngAppPath + 'components/controls/switch/switch.control.html',
    controller: SwitchControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.SwitchControlComponent = SwitchControlComponent;

},{}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var TextareaControlController = (function () {
    function TextareaControlController() {
        _classCallCheck(this, TextareaControlController);
    }

    _createClass(TextareaControlController, [{
        key: '$onInit',
        value: function $onInit() {}
    }]);

    return TextareaControlController;
})();

var TextareaControlComponent = {
    templateUrl: ngAppPath + 'components/controls/textarea/textarea.control.html',
    controller: TextareaControlController,
    controllerAs: 'vm',
    bindings: {
        'data': "<"
    }
};
exports.TextareaControlComponent = TextareaControlComponent;

},{}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var siteBreakpoints = ['default', 'tablet', 'mobile'];
exports.siteBreakpoints = siteBreakpoints;

},{}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var colorSelector = function colorSelector() {
    "use strict";

    var link = function link(scope, elem, attrs) {

        scope.name = attrs.name ? attrs.name : false;
        scope.text = scope.name ? 'Select color for ' + scope.name : 'Select color';

        scope.isCustom = function () {
            return scope['for'].name === 'Custom';
        };

        scope.colors = [{
            name: 'Main color',
            value: 'mtc'
        }, {
            name: 'Secondary color',
            value: 'stc'
        }, {
            name: 'Third color',
            value: 'ttc'
        }, {
            name: 'Custom',
            value: ''
        }];

        if (angular.isUndefined(scope['for'])) {
            scope['for'] = scope.colors[0];
        }

        scope.selectCallback = function () {};
    };

    var scope = {
        'for': '='
    };

    return {
        restrict: 'E',
        scope: scope,
        link: link,
        templateUrl: ngAppPath + 'directives/color-selector/color-selector.directive.html'
    };
};
exports.colorSelector = colorSelector;

},{}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.controlGenerator = controlGenerator;

function controlGenerator($compile, $sce, $rootScope, PreviewGenerator) {
    return {
        scope: {
            type: '=',
            data: '=',
            tab: '=',
            subtab: '=',
            themeOption: '='
        },
        link: function link(scope, element, attrs) {
            var generatedTemplate = '<' + scope.type + '-control model="model_name" data="data"></' + scope.type + '-control>';
            element.prepend($compile(generatedTemplate)(scope));
        },
        templateUrl: ngAppPath + 'directives/control-generator/control-generator.directive.html'
    };
}

},{}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.elementControl = elementControl;

function elementControl($window, $mdDialog) {
    "use strict";

    return {
        restrict: 'E',
        link: link,
        templateUrl: ngAppPath + 'directives/element-control/element-control.directive.html'
    };
}

;

},{}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var elementMargins = function elementMargins(siteBreakpoints) {
    "use strict";

    var link = function link(scope, element, attrs) {
        scope.sides = ['top', 'right', 'bottom', 'left'];
        scope.breakpoints = siteBreakpoints;
    };

    return {
        link: link,
        restrict: 'E',
        scope: {
            model: '='
        },
        templateUrl: ngAppPath + 'directives/element-margins/element-margins.directive.html'
    };
};
exports.elementMargins = elementMargins;

},{}],42:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var fontcolorpicker = function fontcolorpicker() {
    "use strict";

    var link = function link(scope, elem, attrs) {
        var $ = jQuery;
        var $elem = $(elem);
        var $wrapper = $elem.closest('.stm_to-controls-wrapper');
    };

    var scope = {
        onChange: '='
    };

    return {
        restrict: 'A',
        scope: scope,
        link: link
    };
};
exports.fontcolorpicker = fontcolorpicker;

},{}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var hider = function hider() {
    "use strict";

    var link = function link(scope, elem, attrs) {
        var $ = jQuery;
        var $elem = $(elem);
        var $wrapper = $elem.closest('.stm_to-controls-wrapper');
        var hide_elements = '.stm_to-single_control-posttype__inner, .stm_to-single_control:not(.stm_to-single_control-posttype)';

        scope.$watch('onChange', function (value) {
            if (angular.isString(value)) {
                value = value === 'true';
            }
            if (value) {
                $wrapper.find(hide_elements).fadeIn(300);
            } else {
                $wrapper.find(hide_elements).fadeOut(300);
            }
        });
    };

    var scope = {
        onChange: '='
    };

    return {
        restrict: 'A',
        scope: scope,
        link: link
    };
};
exports.hider = hider;

},{}],44:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var iconsList = function iconsList(DialogService, $filter, $document) {
    "use strict";

    var link = function link(scope, elem, attrs) {

        elem.bind('click', function () {
            scope.openList();
        });

        scope.iconName = '';
        scope.iconSearch = '';
        scope.setName = 'FontAwesome';
        scope.icons = [];
        scope.iconSets = stm_icons;
        scope.currentSet = scope.iconSets[scope.setName];
        scope.iconsSetsNames = [];

        scope.filteredIcons = scope.currentSet;
        scope.limit = 150;

        angular.forEach(stm_icons, function (value, key) {
            scope.iconsSetsNames.push(key);

            angular.forEach(value, function (icon) {
                scope.icons.push(icon);
            });
        });

        scope.openList = function () {
            var html = angular.element('body');

            var options = {
                parent: html,
                scope: scope
            };

            scope.list = DialogService.fromTemplate('iconpicker', options);

            setTimeout(function () {
                scope.$emit('iconsList:opened');
            }, 500);

            scope.list.result.then(function (selectedIcon) {
                scope.icon = selectedIcon;
            });
        };

        scope.getFilteredIcons = function (iconName) {

            if (iconName === 0) {
                scope.limit = 150;
                scope.filteredIcons = scope.currentSet;
            }
            scope.filteredIcons = $filter('filter')(scope.currentSet, iconName);
        };

        scope.updateLimit = function () {
            scope.limit += 50;
        };

        scope.selectIcon = function (icon) {
            scope.list.close(icon);
            scope.isOpen = false;
        };

        scope.setCurrentIconSet = function (set_name, iconSearch) {
            scope.limit = 150;
            scope.currentSet = scope.iconSets[set_name];
            scope.setName = set_name;

            scope.getFilteredIcons(iconSearch);
        };
    };

    return {
        link: link,
        scope: {
            icon: '='
        },
        restrict: 'A'
    };
};
exports.iconsList = iconsList;

},{}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var materialForm = function materialForm() {

    var scope = {
        formStyle: '='
    };

    var link = function link(scope, elem, attrs) {
        var forms = ['style_3'];
        var $ = jQuery;

        var inputs = $('control-generator input, control-generator textarea').not(':input[type=button], ' + ':input[type=submit], ' + ':input[type=reset], ' + ':input[type=checkbox], ' + ':input[type=radio], ' + '.default-form, ' + ':input[type=search][name="s"], ' + '#coupon_code, ' + ':input[type=hidden]');

        var wrapper = 'stm_material_form';

        scope.$watch('formStyle', function (val, oldVal) {
            if (val !== oldVal) {
                if (forms.includes(val)) {

                    $(inputs).each(function () {

                        if ($('body').hasClass('woocommerce-page')) return;

                        var label = $(this).attr('placeholder');

                        if (!$(this).parent().hasClass(wrapper)) {
                            $(this).parent().addClass(wrapper);
                        }
                        $(this).siblings('.label').show();

                        $(this).attr('placeholder', '');

                        checkValue($(this));
                    });

                    $(inputs).on('focusout change', function (e) {
                        checkValue($(this));
                    });

                    $(inputs).on('focus', function (e) {
                        $(this).closest('.stm_material_form').addClass('stm_has-value');
                    });

                    changeTextarea();

                    $('select').on('change', function () {
                        if ($(this).children('option:first-child').is(':selected')) {
                            $(this).closest('.stm_select').removeClass('stm_has-value');
                        } else {
                            $(this).closest('.stm_select').addClass('stm_has-value');
                        }
                    });
                } else {
                    $(inputs).each(function () {
                        var label = $(this).siblings('.label');

                        $(this).parents('.' + wrapper).removeClass(wrapper);
                        label.hide();
                        $(this).attr('placeholder', label.text());
                    });
                }
            }
        });

        function checkValue($el) {
            var val = $el.val();

            if (val == '') {
                if ($el.hasClass('hasDatepicker') || $el.hasClass('stm_timepicker')) {
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        if (!$el.is(':focus') && val !== '') {
                            $el.closest('.stm_material_form').removeClass('stm_has-value');
                            checkValue($el);
                        }
                    }, 300);
                } else {
                    $el.closest('.stm_material_form').removeClass('stm_has-value');
                }
            } else {
                $el.closest('.stm_material_form').addClass('stm_has-value');
            }
        }

        function changeTextarea() {
            if ($('textarea').length) {
                $('textarea').each(function () {
                    $(this).attr('rows', 1);
                });
                var ta = document.querySelector('textarea');
                ta.addEventListener('focus', function () {
                    autosize(ta);
                });
            }
        }
    };

    return {
        scope: scope,
        link: link,
        restrict: 'A'
    };
};
exports.materialForm = materialForm;

},{}],46:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var translationsFilter = function translationsFilter($rootScope) {
    return function (val) {
        var translations = $rootScope.stm_hb_tr;
        if (typeof translations !== 'undefined') {
            val = typeof translations[val] !== 'undefined' ? translations[val] : val;
        }
        return val;
    };
};
exports.translationsFilter = translationsFilter;

},{}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var trustHtmlFilter = function trustHtmlFilter($sce) {
    return function (val) {
        return $sce.trustAsHtml(val);
    };
};
exports.trustHtmlFilter = trustHtmlFilter;

},{}],48:[function(require,module,exports){
'use strict';

var _runRun = require('./run/run');

var _constants = require('./constants');

var _componentsAppRootAppRootComponent = require('./components/app-root/app-root.component');

var _componentsControlsDefaultTextControl = require('./components/controls/default/text.control');

var _componentsControlsImportImportControl = require('./components/controls/import/import.control');

var _componentsControlsTextareaTextareaControl = require('./components/controls/textarea/textarea.control');

var _componentsControlsSliderSliderControl = require('./components/controls/slider/slider.control');

var _componentsControlsRadioRadioControl = require('./components/controls/radio/radio.control');

var _componentsControlsSelectSelectControl = require('./components/controls/select/select.control');

var _componentsControlsCheckboxCheckboxControl = require('./components/controls/checkbox/checkbox.control');

var _componentsControlsSwitchSwitchControl = require('./components/controls/switch/switch.control');

var _componentsControlsColorpickerColorpickerControl = require('./components/controls/colorpicker/colorpicker.control');

var _componentsControlsImageImageControl = require('./components/controls/image/image.control');

var _componentsControlsDividerDividerControl = require('./components/controls/divider/divider.control');

var _componentsControlsSocialsSocialsControl = require('./components/controls/socials/socials.control');

var _componentsControlsIconpickerIconpickerControl = require('./components/controls/iconpicker/iconpicker.control');

var _componentsControlsFontFontControl = require('./components/controls/font/font.control');

var _componentsControlsFontcommonFontcommonControl = require('./components/controls/fontcommon/fontcommon.control');

var _componentsControlsBuilderBuilderControl = require('./components/controls/builder/builder.control');

var _componentsControlsPosttypePosttypeControl = require('./components/controls/posttype/posttype.control');

var _fitlersTrustHtml = require('./fitlers/trustHtml');

var _fitlersTranslations = require('./fitlers/translations');

var _servicesWpMediaService = require('./services/wpMedia.service');

var _servicesDialogService = require('./services/dialog.service');

var _servicesPreviewGenerator = require('./services/previewGenerator');

var _servicesHistoryService = require('./services/history.service');

var _directivesControlGeneratorControlGenerator = require('./directives/control-generator/control-generator');

var _directivesElementControlElementControlDirective = require('./directives/element-control/element-control.directive');

var _directivesIconsListIconsListDirective = require('./directives/icons-list/icons-list.directive');

var _directivesElementMarginsElementMarginsDirective = require('./directives/element-margins/element-margins.directive');

var _directivesColorSelectorColorSelectorDirective = require('./directives/color-selector/color-selector.directive');

var _directivesHiderHiderDirective = require('./directives/hider/hider.directive');

var _directivesFontcolorpickerFontcolorpickerDirective = require('./directives/fontcolorpicker/fontcolorpicker.directive');

var _directivesMaterialFormMaterialForm = require('./directives/materialForm/materialForm');

function checkNested(obj /*, level1, level2, ... levelN*/) {
    var args = Array.prototype.slice.call(arguments, 1);

    for (var i = 0; i < args.length; i++) {
        if (!obj || !obj.hasOwnProperty(args[i])) {
            return false;
        }
        obj = obj[args[i]];
    }
    return true;
}

var toApp = angular.module('theme_options', ['app.components', 'app.directives', 'app.services', 'app.config', 'app.filters']).run(function ($rootScope) {
    $rootScope.getOption = function (option) {
        var res = '';

        if (angular.isDefined($rootScope.theme_options)) {

            angular.forEach($rootScope.theme_options, function (h_tab, h_tab_key) {
                angular.forEach(h_tab.options, function (v_tab, v_tab_key) {
                    angular.forEach(v_tab.options, function (v, k) {
                        if (option === k) {
                            res = v.data.value;
                        }
                    });
                });
            });
        }

        return res;
    };
});

toApp.run(_runRun.appRun).constant('siteBreakpoints', _constants.siteBreakpoints);

angular.module('app.components', ['ngMaterial', 'ui.bootstrap', 'mdColorPicker', 'dndLists', 'infinite-scroll', 'colorpicker.module', 'ui.sortable']);

angular.module('app.filters', []);

angular.module('app.directives', []);

angular.module('app.services', []);

angular.module('app.components').component('appRoot', _componentsAppRootAppRootComponent.AppRootComponent).component('textControl', _componentsControlsDefaultTextControl.TextControlComponent).component('importControl', _componentsControlsImportImportControl.ImportControlComponent).component('textareaControl', _componentsControlsTextareaTextareaControl.TextareaControlComponent).component('sliderControl', _componentsControlsSliderSliderControl.SliderControlComponent).component('radioControl', _componentsControlsRadioRadioControl.RadioControlComponent).component('selectControl', _componentsControlsSelectSelectControl.SelectControlComponent).component('checkboxControl', _componentsControlsCheckboxCheckboxControl.CheckboxControlComponent).component('switchControl', _componentsControlsSwitchSwitchControl.SwitchControlComponent).component('imageControl', _componentsControlsImageImageControl.ImageControlComponent).component('dividerControl', _componentsControlsDividerDividerControl.DividerControlComponent).component('socialsControl', _componentsControlsSocialsSocialsControl.SocialsControlComponent).component('iconpickerControl', _componentsControlsIconpickerIconpickerControl.IconpickerControlComponent).component('fontControl', _componentsControlsFontFontControl.FontControlComponent).component('fontcommonControl', _componentsControlsFontcommonFontcommonControl.FontCommonControlComponent).component('builderControl', _componentsControlsBuilderBuilderControl.BuilderControlComponent).component('colorpickerControl', _componentsControlsColorpickerColorpickerControl.ColorpickerControlComponent).component('posttypeControl', _componentsControlsPosttypePosttypeControl.PosttypeControlComponent);

angular.module('app.filters').filter('trustHtml', _fitlersTrustHtml.trustHtmlFilter).filter('translate', _fitlersTranslations.translationsFilter);

angular.module('app.services').service('wpMedia', _servicesWpMediaService.WpMediaService).service('PreviewGenerator', _servicesPreviewGenerator.PreviewGenerator).service('DialogService', _servicesDialogService.DialogService).service('History', _servicesHistoryService.HistoryService);

angular.module('app.directives').directive('controlGenerator', _directivesControlGeneratorControlGenerator.controlGenerator).directive('elementControl', _directivesElementControlElementControlDirective.elementControl).directive('iconsList', _directivesIconsListIconsListDirective.iconsList).directive('elementMargins', _directivesElementMarginsElementMarginsDirective.elementMargins).directive('colorSelector', _directivesColorSelectorColorSelectorDirective.colorSelector).directive('fontcolorpicker', _directivesFontcolorpickerFontcolorpickerDirective.fontcolorpicker).directive('materialForm', _directivesMaterialFormMaterialForm.materialForm).directive('hider', _directivesHiderHiderDirective.hider);

angular.module('app.config', ['ngMaterial']).config(function ($mdThemingProvider) {

    $mdThemingProvider.definePalette('amazingPaletteName', {
        '50': '0073aa',
        '100': '0073aa',
        '200': '0073aa',
        '300': '0073aa',
        '400': '0073aa',
        '500': '0073aa',
        '600': '0073aa',
        '700': '0073aa',
        '800': '0073aa',
        '900': '0073aa',
        'A100': '0073aa',
        'A200': '0073aa',
        'A400': '0073aa',
        'A700': '0073aa'
    });

    $mdThemingProvider.theme('default').accentPalette('amazingPaletteName', {
        'default': '50'
    }).primaryPalette('amazingPaletteName', {
        'default': '50'
    });
});

},{"./components/app-root/app-root.component":1,"./components/controls/builder/builder.control":20,"./components/controls/checkbox/checkbox.control":21,"./components/controls/colorpicker/colorpicker.control":22,"./components/controls/default/text.control":23,"./components/controls/divider/divider.control":24,"./components/controls/font/font.control":25,"./components/controls/fontcommon/fontcommon.control":26,"./components/controls/iconpicker/iconpicker.control":27,"./components/controls/image/image.control":28,"./components/controls/import/import.control":29,"./components/controls/posttype/posttype.control":30,"./components/controls/radio/radio.control":31,"./components/controls/select/select.control":32,"./components/controls/slider/slider.control":33,"./components/controls/socials/socials.control":34,"./components/controls/switch/switch.control":35,"./components/controls/textarea/textarea.control":36,"./constants":37,"./directives/color-selector/color-selector.directive":38,"./directives/control-generator/control-generator":39,"./directives/element-control/element-control.directive":40,"./directives/element-margins/element-margins.directive":41,"./directives/fontcolorpicker/fontcolorpicker.directive":42,"./directives/hider/hider.directive":43,"./directives/icons-list/icons-list.directive":44,"./directives/materialForm/materialForm":45,"./fitlers/translations":46,"./fitlers/trustHtml":47,"./run/run":50,"./services/dialog.service":51,"./services/history.service":52,"./services/previewGenerator":53,"./services/wpMedia.service":54}],49:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BuilderElementsController = (function () {
    function BuilderElementsController($mdDialog) {
        _classCallCheck(this, BuilderElementsController);

        this.$mdDialog = $mdDialog;
        this.elements = builderElements;
    }

    _createClass(BuilderElementsController, [{
        key: "selectElement",
        value: function selectElement(element) {
            this.$mdDialog.hide(element);
        }
    }]);

    return BuilderElementsController;
})();

exports.BuilderElementsController = BuilderElementsController;

},{}],50:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var appRun = function appRun($window, $rootScope) {
    $rootScope.stm_hb_tr = stm_hb_translations;
};
exports.appRun = appRun;

},{}],51:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var DialogService = (function () {
    function DialogService($uibModal, $q) {
        'ngInject';

        _classCallCheck(this, DialogService);

        this.$modal = $uibModal;
        this.$q = $q;
    }

    _createClass(DialogService, [{
        key: 'fromTemplate',
        value: function fromTemplate(templateName) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            options.templateUrl = ngAppPath + 'modals/' + templateName + '/' + templateName + '.modal.html';

            var modal = this.$modal.open(options);

            return modal;
        }
    }, {
        key: 'close',
        value: function close(modal) {
            return modal.dismiss('cancel');
        }
    }, {
        key: 'confirm',
        value: function confirm(modal, data) {
            return modal.close(data);
        }
    }, {
        key: 'getResult',
        value: function getResult(modal) {

            var deferred = this.$q.defer();

            modal.result.then(function (data) {
                deferred.resolve(data);
            }, function (dismiss) {
                deferred.reject(dismiss);
            });

            return deferred.promise;
        }
    }]);

    return DialogService;
})();

exports.DialogService = DialogService;

},{}],52:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var HistoryService = (function () {
    function HistoryService($rootScope) {
        _classCallCheck(this, HistoryService);

        this.$root = $rootScope;
        this.object = {};
        this.steps = 50;
        this.backups = [];
        this.variable = '';
        this.history = '';
        this.undoTrigerred = false;
    }

    _createClass(HistoryService, [{
        key: 'watch',
        value: function watch(variable) {
            var _this = this;

            this.variable = variable;

            this.$root.$watch(this.variable, function (newValue, oldValue) {

                var equals = angular.equals(newValue, oldValue);

                if (!equals && !_this.undoTrigerred) {
                    var backup = angular.copy(oldValue);

                    if (_this.backups.length > 70) {
                        _this.backups.shift();
                    }

                    _this.backups.push(backup);
                }
            }, true);
        }
    }, {
        key: 'undo',
        value: function undo() {
            if (this.backups.length) {
                var last_backup = this.backups.pop();
                this.$root[this.variable] = Object.assign({}, this.$root[this.variable], last_backup);
            }
            this.undoTrigerred = true;
        }
    }]);

    return HistoryService;
})();

exports.HistoryService = HistoryService;

},{}],53:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var PreviewGenerator = (function () {
    function PreviewGenerator($http) {
        _classCallCheck(this, PreviewGenerator);

        this.$http = $http;
        this.tpl = '';
        this.type = '';
        this.attrs = '';
    }

    _createClass(PreviewGenerator, [{
        key: 'parseAttrs',
        value: function parseAttrs() {
            var attrsArray = [];

            angular.forEach(this.attrs, function (v, k) {

                var parsedAtts = '';

                if (typeof v === 'array') {
                    parsedAtts = v.join(' ');
                } else {
                    parsedAtts = v;
                }

                attrsArray.push(k + '="' + v + '"');
            });

            return attrsArray.join(' ');
        }
    }, {
        key: 'getTemplate',
        value: function getTemplate() {
            if (angular.isUndefined(this.type)) {
                return;
            }
            return this.$http({
                method: 'GET',
                url: ngAppPath + 'templates/previews/' + this.type + '.html'
            });
        }
    }, {
        key: 'generatePreview',
        value: function generatePreview() {
            var _this = this;

            var type = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
            var attrs = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

            if (type.length === 0) {
                return;
            }
            this.type = type;
            this.attrs = attrs;

            this.getTemplate(this.type).then(function (res) {
                _this.tpl = res;
                _this.tpl = _this.tpl.replace('{attrs}', _this.attrs);
                return _this.attrs;
            }, function (error) {
                throw new Error(error.msg);
            });
        }
    }]);

    return PreviewGenerator;
})();

exports.PreviewGenerator = PreviewGenerator;

},{}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WpMediaService = (function () {
    function WpMediaService($window, $q) {
        _classCallCheck(this, WpMediaService);

        this.$window = $window;
        this.frame = {};
        this.$q = $q;
    }

    _createClass(WpMediaService, [{
        key: "openModal",
        value: function openModal() {
            this.frame = this.$window.wp.media({
                title: "Select image",
                library: { type: "" },
                button: {
                    text: "Select"
                },
                multiple: false
            }).open();
        }
    }, {
        key: "getSelectedImageLink",
        value: function getSelectedImageLink() {
            var size = arguments.length <= 0 || arguments[0] === undefined ? 'full' : arguments[0];

            var vm = this;
            var deffered = this.$q.defer();

            this.frame.on('select', function () {
                var frameObj = vm.frame.state().get("selection").first().toJSON();

                var url = frameObj.url;
                if (!angular.isUndefined(frameObj.sizes) && !angular.isUndefined(frameObj.sizes[size])) {
                    url = frameObj.sizes[size].url;
                }
                var res = {
                    'id': frameObj.id,
                    'url': url
                };
                deffered.resolve(res);
            });

            return deffered.promise;
        }
    }, {
        key: "getImageById",
        value: function getImageById(id) {
            return this.$window.wp.media.attachment(id).fetch();
        }
    }]);

    return WpMediaService;
})();

exports.WpMediaService = WpMediaService;

},{}]},{},[48]);
